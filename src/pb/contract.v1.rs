// @generated
// This file is @generated by prost-build.
/// CTF Exchange Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfExchangeEvents {
    #[prost(message, repeated, tag="1")]
    pub ctfexchange_fee_chargeds: ::prost::alloc::vec::Vec<CtfexchangeFeeCharged>,
    #[prost(message, repeated, tag="2")]
    pub ctfexchange_new_admins: ::prost::alloc::vec::Vec<CtfexchangeNewAdmin>,
    #[prost(message, repeated, tag="3")]
    pub ctfexchange_new_operators: ::prost::alloc::vec::Vec<CtfexchangeNewOperator>,
    #[prost(message, repeated, tag="4")]
    pub ctfexchange_order_cancelleds: ::prost::alloc::vec::Vec<CtfexchangeOrderCancelled>,
    #[prost(message, repeated, tag="5")]
    pub ctfexchange_order_filleds: ::prost::alloc::vec::Vec<CtfexchangeOrderFilled>,
    #[prost(message, repeated, tag="6")]
    pub ctfexchange_orders_matcheds: ::prost::alloc::vec::Vec<CtfexchangeOrdersMatched>,
    #[prost(message, repeated, tag="7")]
    pub ctfexchange_proxy_factory_updateds: ::prost::alloc::vec::Vec<CtfexchangeProxyFactoryUpdated>,
    #[prost(message, repeated, tag="8")]
    pub ctfexchange_removed_admins: ::prost::alloc::vec::Vec<CtfexchangeRemovedAdmin>,
    #[prost(message, repeated, tag="9")]
    pub ctfexchange_removed_operators: ::prost::alloc::vec::Vec<CtfexchangeRemovedOperator>,
    #[prost(message, repeated, tag="10")]
    pub ctfexchange_safe_factory_updateds: ::prost::alloc::vec::Vec<CtfexchangeSafeFactoryUpdated>,
    #[prost(message, repeated, tag="11")]
    pub ctfexchange_token_registereds: ::prost::alloc::vec::Vec<CtfexchangeTokenRegistered>,
    #[prost(message, repeated, tag="12")]
    pub ctfexchange_trading_pauseds: ::prost::alloc::vec::Vec<CtfexchangeTradingPaused>,
    #[prost(message, repeated, tag="13")]
    pub ctfexchange_trading_unpauseds: ::prost::alloc::vec::Vec<CtfexchangeTradingUnpaused>,
}
/// Conditional Tokens Framework Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfEvents {
    #[prost(message, repeated, tag="1")]
    pub ctf_condition_preparations: ::prost::alloc::vec::Vec<CtfConditionPreparation>,
    #[prost(message, repeated, tag="2")]
    pub ctf_condition_resolutions: ::prost::alloc::vec::Vec<CtfConditionResolution>,
    #[prost(message, repeated, tag="3")]
    pub ctf_position_splits: ::prost::alloc::vec::Vec<CtfPositionSplit>,
    #[prost(message, repeated, tag="4")]
    pub ctf_position_merges: ::prost::alloc::vec::Vec<CtfPositionMerge>,
    #[prost(message, repeated, tag="5")]
    pub ctf_position_redemptions: ::prost::alloc::vec::Vec<CtfPositionRedeem>,
}
/// USDC Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcEvents {
    #[prost(message, repeated, tag="1")]
    pub usdc_transfers: ::prost::alloc::vec::Vec<UsdcTransfer>,
    #[prost(message, repeated, tag="2")]
    pub usdc_approvals: ::prost::alloc::vec::Vec<UsdcApproval>,
}
/// Combined Trading Data
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradingData {
    #[prost(message, repeated, tag="1")]
    pub trade_events: ::prost::alloc::vec::Vec<Trade>,
    #[prost(message, repeated, tag="2")]
    pub market_events: ::prost::alloc::vec::Vec<Market>,
    #[prost(message, repeated, tag="3")]
    pub user_events: ::prost::alloc::vec::Vec<User>,
    #[prost(uint64, tag="4")]
    pub total_trades: u64,
    #[prost(string, tag="5")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(uint64, tag="6")]
    pub block_number: u64,
    #[prost(message, optional, tag="7")]
    pub block_timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Trade Event
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trade {
    #[prost(string, tag="1")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub log_index: u32,
    #[prost(message, optional, tag="3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub block_number: u64,
    #[prost(string, tag="5")]
    pub trader: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub market_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub outcome_token: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub fee: ::prost::alloc::string::String,
    /// "buy" or "sell"
    #[prost(string, tag="11")]
    pub trade_type: ::prost::alloc::string::String,
}
/// Market Event
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Market {
    #[prost(string, tag="1")]
    pub market_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub condition_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub question_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub oracle: ::prost::alloc::string::String,
    #[prost(uint32, tag="5")]
    pub outcome_slot_count: u32,
    #[prost(message, optional, tag="6")]
    pub creation_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// "open", "closed", "resolved"
    #[prost(string, tag="7")]
    pub status: ::prost::alloc::string::String,
}
/// User Event
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag="1")]
    pub address: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub first_seen: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag="3")]
    pub last_seen: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub total_trades: u64,
    #[prost(string, tag="5")]
    pub total_volume: ::prost::alloc::string::String,
}
/// CTF Event Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfConditionPreparation {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub oracle: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub question_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="8")]
    pub outcome_slot_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfConditionResolution {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub oracle: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub question_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="8")]
    pub outcome_slot_count: u32,
    #[prost(string, repeated, tag="9")]
    pub payouts: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionSplit {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub stakeholder: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub partition: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionMerge {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub stakeholder: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub partition: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionRedeem {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub redeemer: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub index_sets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub payout: ::prost::alloc::string::String,
}
/// USDC Event Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcTransfer {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcApproval {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub spender: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeFeeCharged {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub receiver: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="6")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeNewAdmin {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub new_admin_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub admin: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeNewOperator {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub new_operator_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub admin: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeOrderCancelled {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub order_hash: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeOrderFilled {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub order_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub maker: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub taker: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="8")]
    pub maker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub taker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub maker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub taker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub fee: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeOrdersMatched {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub taker_order_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub taker_order_maker: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub maker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub taker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub maker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub taker_amount_filled: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeProxyFactoryUpdated {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub old_proxy_factory: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub new_proxy_factory: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeRemovedAdmin {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub removed_admin: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub admin: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeRemovedOperator {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub removed_operator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub admin: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeSafeFactoryUpdated {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub old_safe_factory: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub new_safe_factory: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeTokenRegistered {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub token0: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub token1: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="7")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeTradingPaused {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub pauser: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfexchangeTradingUnpaused {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub pauser: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
